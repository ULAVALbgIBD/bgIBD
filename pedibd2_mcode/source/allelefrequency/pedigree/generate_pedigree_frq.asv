function [family_genotype, error] = generate_pedigree_frq(genotype_all, all_families)

error = 0;
family_genotype = [];

[d1, d2, d3] = size(genotype_all);

if( d3 ~= 2 )
    error = 1;
    return;
end

if( d1 <= 0 || d2 <= 0 )
    error = 1;
    return;
end

nind = d1;
nloc = d2;

% allele frquency of 1

checkmap(1:nind) = 0;

for i = 1:length(all_families)
    pedigree_range_full = all_families{i}.pedigree_range_full;
    if( any(pedigree_range_full > nind) || any(pedigree_range_full <= 0) )
        error = 1;
        disp('error in family structures');
        return;
    end
    if( any(checkmap(pedigree_range_full)>0) )
        error = 1;
        disp('error in family structures');
        return;
    else
        checkmap(pedigree_range_full) = 1;
    end
    family_genotype{i} = genotype_all(pedigree_range_full, 1:nloc, 1:2);
    family = all_families{i}.structure;
    num = length(pedigree_range_full)
    [r, c] = size( family );
    if( r <= 0 || r ~= nind || c < 12 )
        error = 1;
        disp('error in family structures');
        return;
    end
    [family_genotype{i} error] = remove_typing_error(family_genotype{i}, family);
    if( error ~= 0 )
        disp('error in family structures');
        return;
    end
end



end






